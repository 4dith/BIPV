// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Ray
{
    float3 origin;
    float3 direction;
};

struct HitRecord
{
    float3 pt;
    float3 normal;
    float t;
    bool frontFace;
};

struct Triangle
{
    uint v0;
    uint v1;
    uint v2;
};

struct Bound
{
    float3 Min;
    float3 Max;
    uint endIndex;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
StructuredBuffer<Triangle> Triangles;
StructuredBuffer<float3> Colors;
StructuredBuffer<float3> Vertices;
StructuredBuffer<Bound> Bounds;

uint NSamples;
uint MaxDepth;
float4x4 CameraToWorld;
float4x4 CameraInverseProj;

#define MAX_BVH_DEPTH 10

uint Hash(uint x)
{
    x ^= x >> 16;
    x *= 0x85ebca6b;
    x ^= x >> 13;
    x *= 0xc2b2ae35;
    x ^= x >> 16;
    return x;
}

float Random(uint seed)
{
    uint hashed = Hash(seed);
    return (float) (hashed & 0x00FFFFFFu) / 16777216.0f; // Normalize to [0, 1]
}

float2 Random2(uint seed)
{
    // Generate the first random number
    float random1 = Random(seed);

    // Modify the seed to generate the second random number
    float random2 = Random(seed + 1);

    return float2(random1, random2);
}

float3 RandomUnitVector(uint seed)
{
    float x = Random(seed) * 2.0f - 1.0f;
    float y = Random(seed + 1) * 2.0f - 1.0f;
    float z = Random(seed + 2) * 2.0f - 1.0f;

    return normalize(float3(x, y, z));
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(CameraInverseProj, float4(uv, 0.0f, 1.0f)).xyz;
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    // direction = normalize(direction);
    return CreateRay(origin, direction);
}

void SetFaceNormal(inout HitRecord rec, Ray r, float3 outwardNormal)
{
    rec.frontFace = dot(r.direction, outwardNormal) < 0;
    rec.normal = rec.frontFace ? outwardNormal : -outwardNormal;
}

bool HitTriangle(Triangle tri, Ray r, float tMin, float tMax, inout HitRecord rec)
{
    float3 v0 = Vertices[tri.v0];
    float3 v1 = Vertices[tri.v1];
    float3 v2 = Vertices[tri.v2];
    
    // Edges
    float3 e1 = v1 - v0;
    float3 e2 = v2 - v0;
    
    // Checking if parallel
    float3 p = cross(r.direction, e2);
    float det = dot(e1, p);
    if (det < 1e-8f)
        return false;
    
    // Check if intersection is outside triangle
    float invdet = 1.0f / det;
    float3 T = r.origin - v0;
    float u = dot(T, p) * invdet;
    if (u < 0.0f || u > 1.0f)
        return false;
    
    float3 q = cross(T, e1);
    float v = dot(r.direction, q) * invdet;
    if (v < 0.0f || u + v > 1.0f)
        return false;
    
    float t = dot(e2, q) * invdet;
    if (t <= tMin || t >= tMax)
        return false;
    
    rec.t = t;
    rec.pt = r.origin + t * r.direction;
    SetFaceNormal(rec, r, normalize(cross(e1, e2)));
    return true;
}

bool HitBound(Bound b, Ray r, float near, float far, out float t)
{
    // Prenormalize rays??
    float3 invDir = 1 / normalize(r.direction);
    
    float t1x = (b.Min.x - r.origin.x) * invDir.x;
    float t2x = (b.Max.x - r.origin.x) * invDir.x;
    float tMinX = min(t1x, t2x);
    float tMaxX = max(t1x, t2x);
    
    float t1y = (b.Min.y - r.origin.y) * invDir.y;
    float t2y = (b.Max.y - r.origin.y) * invDir.y;
    float tMinY = min(t1y, t2y);
    float tMaxY = max(t1y, t2y);
    
    float t1z = (b.Min.z - r.origin.z) * invDir.z;
    float t2z = (b.Max.z - r.origin.z) * invDir.z;
    float tMinZ = min(t1z, t2z);
    float tMaxZ = max(t1z, t2z);
    
    float tMin = max(max(tMinX, tMinY), tMinZ);
    float tMax = min(min(tMaxX, tMaxY), tMaxZ);
    
    t = tMin > 0 ? tMin : tMax;
    return near < tMin && far > tMax && tMax >= max(0.0f, tMin);
}

float3 RayColor(Ray ray, uint seed)
{    
    HitRecord rec;
    rec.frontFace = false;
    rec.normal = float3(0.0f, 0.0f, 0.0f);
    rec.pt = float3(0.0f, 0.0f, 0.0f);
    rec.t = 0.0f;
    
    float nearLimit = 0.001f;
    float farLimit = 5000.0f;
    
    bool hitAnything = true;
    uint nTris, nBounds, _;
    Triangles.GetDimensions(nTris, _);
    Bounds.GetDimensions(nBounds, _);
        
    float3 attenuation = float3(1.0f, 1.0f, 1.0f);
    
    for (uint depth = 0; depth <= MaxDepth; depth++)
    {
        hitAnything = false;
        
        uint BvhBacktrackArray[MAX_BVH_DEPTH];
        BvhBacktrackArray[0] = 1;
        int backTrackIndex = 0;
        
        while (!hitAnything && backTrackIndex != -1)
        {
            uint currentBound = BvhBacktrackArray[backTrackIndex--];
            
            while (currentBound != 0 && currentBound < nBounds / 2)
            {
                uint leftBound = 2 * currentBound;
                uint rightBound = 2 * currentBound + 1;
                
                float leftT, rightT;
                
                bool leftHit = HitBound(Bounds[leftBound], ray, nearLimit, farLimit, leftT);
                bool rightHit = HitBound(Bounds[rightBound], ray, nearLimit, farLimit, rightT);
                
                bool leftNear = leftT < rightT;
                uint nearBound = leftNear ? leftBound : rightBound;
                uint farBound = leftNear ? rightBound : leftBound;
                bool nearHit = leftNear ? leftHit : rightHit;
                bool farHit = leftNear ? rightHit : leftHit;
                
                currentBound = nearHit ? nearBound : (farHit ? farBound : 0);
            
                if (currentBound == nearBound && farHit && backTrackIndex < MAX_BVH_DEPTH - 1)
                {
                    BvhBacktrackArray[++backTrackIndex] = farBound;
                }
            }
        
            if (currentBound >= nBounds / 2)
            {
                float closestSoFar = farLimit;
            
                uint startIndex = (currentBound > nBounds / 2) ? Bounds[currentBound - 1].endIndex : 0;
                uint endIndex = Bounds[currentBound].endIndex;
                for (uint i = startIndex; i < endIndex; i++)
                {
                    if (HitTriangle(Triangles[i], ray, nearLimit, closestSoFar, rec))
                    {
                        hitAnything = true;
                        closestSoFar = rec.t;
                    }
                }
            }
        }
        
        if (hitAnything)
        {
            seed = Hash(seed);
            ray.origin = rec.pt;
            ray.direction = rec.normal + RandomUnitVector(seed);      
            attenuation *= float3(1.0f, 1.0f, 1.0f);
        }
        else
        {
            if (depth == 0)
                return float3(0.0f, 0.0f, 0.0f);
            return attenuation * lerp(float3(1.0f, 1.0f, 1.0f), float3(0.5f, 0.7f, 1.0f), 0.5f * (normalize(ray.direction).y + 1.0f));
        }
    }
    
    return float3(0.0f, 0.0f, 0.0f);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    uint sWidth, sHeight;
    Result.GetDimensions(sWidth, sHeight);
    
    float3 rayColor = float3(0.0f, 0.0f, 0.0f);
    
    for (uint i = 0; i < NSamples; i++)
    {
        uint seed = id.x + id.y * sWidth + i * 2003;
        float2 uv = (id.xy + Random2(seed)) / float2(sWidth, sHeight) * 2.0f - 1.0f;
        Ray ray = CreateCameraRay(uv);
        rayColor += RayColor(ray, seed);
    }
    
    Result[id.xy] = float4(rayColor / NSamples, 1.0f);
}
